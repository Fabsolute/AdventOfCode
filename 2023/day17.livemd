# Day 17 - Clumsy Crucible

```elixir
Mix.install([:kino])

default = "2413432311323
3215453535623
3255245654254
3446585845452
4546657867536
1438598798454
4457876987766
3637877979653
4654967986887
4564679986453
1224686865563
2546548887735
4322674655533"
```

## Problem

[https://adventofcode.com/2023/day/17](https://adventofcode.com/2023/day/17)

### PART 1

The lava starts flowing rapidly once the Lava Production Facility is operational. As you <span title="see you soon?">leave</span>, the reindeer offers you a parachute, allowing you to quickly reach Gear Island.

As you descend, your bird's-eye view of Gear Island reveals why you had trouble finding anyone on your way up: half of Gear Island is empty, but the half below you is a giant factory city!

You land near the gradually-filling pool of lava at the base of your new _lavafall_. Lavaducts will eventually carry the lava throughout the city, but to make use of it immediately, Elves are loading it into large [crucibles](https://en.wikipedia.org/wiki/Crucible) on wheels.

The crucibles are top-heavy and pushed by hand. Unfortunately, the crucibles become very difficult to steer at high speeds, and so it can be hard to go in a straight line for very long.

To get Desert Island the machine parts it needs as soon as possible, you'll need to find the best way to get the crucible _from the lava pool to the machine parts factory_. To do this, you need to minimize _heat loss_ while choosing a route that doesn't require the crucible to go in a _straight line_ for too long.

Fortunately, the Elves here have a map (your puzzle input) that uses traffic patterns, ambient temperature, and hundreds of other parameters to calculate exactly how much heat loss can be expected for a crucible entering any particular city block.

For example:

```
2413432311323
3215453535623
3255245654254
3446585845452
4546657867536
1438598798454
4457876987766
3637877979653
4654967986887
4564679986453
1224686865563
2546548887735
4322674655533
```

Each city block is marked by a single digit that represents the _amount of heat loss if the crucible enters that block_. The starting point, the lava pool, is the top-left city block; the destination, the machine parts factory, is the bottom-right city block. (Because you already start in the top-left block, you don't incur that block's heat loss unless you leave that block and then return to it.)

Because it is difficult to keep the top-heavy crucible going in a straight line for very long, it can move _at most three blocks_ in a single direction before it must turn 90 degrees left or right. The crucible also can't reverse direction; after entering each city block, it may only turn left, continue straight, or turn right.

One way to _minimize heat loss_ is this path:

```
2>>34^>>>1323
32v>>>35v5623
32552456v>>54
3446585845v52
4546657867v>6
14385987984v4
44578769877v6
36378779796v>
465496798688v
456467998645v
12246868655<v
25465488877v5
43226746555v>
```

This path never moves more than three consecutive blocks in the same direction and incurs a heat loss of only _`102`_.

Directing the crucible from the lava pool to the machine parts factory, but not moving more than three consecutive blocks in the same direction, _what is the least heat loss it can incur?_

<!-- livebook:{"break_markdown":true} -->

### PART 2

The crucibles of lava simply aren't large enough to provide an adequate supply of lava to the machine parts factory. Instead, the Elves are going to upgrade to _ultra crucibles_.

Ultra crucibles are even more difficult to steer than normal crucibles. Not only do they have trouble going in a straight line, but they also have trouble turning!

Once an ultra crucible starts moving in a direction, it needs to move _a minimum of four blocks_ in that direction before it can turn (or even before it can stop at the end). However, it will eventually start to get wobbly: an ultra crucible can move a maximum of _ten consecutive blocks_ without turning.

In the above example, an ultra crucible could follow this path to minimize heat loss:

```
2>>>>>>>>1323
32154535v5623
32552456v4254
34465858v5452
45466578v>>>>
143859879845v
445787698776v
363787797965v
465496798688v
456467998645v
122468686556v
254654888773v
432267465553v
```

In the above example, an ultra crucible would incur the minimum possible heat loss of _`94`_.

Here's another example:

```
111111111111
999999999991
999999999991
999999999991
999999999991
```

Sadly, an ultra crucible would need to take an unfortunate path like this one:

```
1>>>>>>>1111
9999999v9991
9999999v9991
9999999v9991
9999999v>>>>
```

This route causes the ultra crucible to incur the minimum possible heat loss of _`71`_.

Directing the _ultra crucible_ from the lava pool to the machine parts factory, _what is the least heat loss it can incur?_

## Solution

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
input = Kino.Input.textarea("Map", default: default)
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
values =
  Kino.Input.read(input)
  |> String.split("\n", trim: true)
  |> Enum.map(&(String.to_charlist(&1) |> Enum.map(fn x -> x - ?0 end)))
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
defmodule Crucible do
  def graph(values, validate, width, height) do
    :gb_sets.from_list([{0, 0, 0, -1, -1}])
    |> dijkstra(validate, values, width, height, Map.new())
  end

  def dijkstra(queue, validate, values, width, height, cache) do
    if :gb_sets.size(queue) == 0 do
      cache
    else
      {{distance, y, x, direction, movement}, queue} = :gb_sets.take_smallest(queue)
      key = {y, x, direction, movement}

      if Map.has_key?(cache, key) do
        dijkstra(queue, validate, values, width, height, cache)
      else
        cache = Map.put(cache, key, distance)

        [{-1, 0}, {0, 1}, {1, 0}, {0, -1}]
        |> Enum.with_index()
        |> Enum.filter(fn {_, new_direction} -> rem(new_direction + 2, 4) != direction end)
        |> Enum.reduce(queue, fn {{dy, dx}, new_direction}, queue ->
          x = x + dx
          y = y + dy

          new_movement =
            if new_direction != direction do
              1
            else
              movement + 1
            end

          is_valid = validate.({direction, new_direction}, {new_movement, movement})

          if 0 <= y and y < height and 0 <= x and x < width and is_valid do
            cost = values |> Enum.at(y) |> Enum.at(x)
            :gb_sets.add({distance + cost, y, x, new_direction, new_movement}, queue)
          else
            queue
          end
        end)
        |> dijkstra(validate, values, width, height, cache)
      end
    end
  end

  def get_min(map, target_x, target_y) do
    map
    |> Map.filter(fn {{y, x, _direction, _movement}, _v} -> y == target_y and x == target_x end)
    |> Map.values()
    |> Enum.min()
  end
end
```

### PART 1

<!-- livebook:{"continue_on_error":true,"reevaluate_automatically":true} -->

```elixir
height = length(values)
width = length(hd(values))

validate = fn _, {new_movement, _} -> new_movement <= 3 end

values
|> Crucible.graph(validate, width, height)
|> Crucible.get_min(width - 1, height - 1)
```

### PART 2

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
height = length(values)
width = length(hd(values))

validate = fn {new_direction, direction}, {new_movement, movement} ->
  new_movement <= 10 and (movement >= 4 or new_direction == direction or movement == -1)
end

values
|> Crucible.graph(validate, width, height)
|> Crucible.get_min(width - 1, height - 1)
```
